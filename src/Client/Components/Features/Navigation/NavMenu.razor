@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<ShimmerLoad IsLoading="@_isLoading">
    @if (!string.IsNullOrEmpty(_loadingError))
    {
        <MudAlert Severity="Severity.Warning">@_loadingError</MudAlert>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" OnClick="()=>OnInitializedAsync()" IconColor="Color.Error">Reload</MudButton>

    }
    else
    {
        <MudTextField T="string" Label="Search" Class="flex-grow-0 mt-2 pt-0 pb-0 ml-2" Adornment="Adornment.End" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search" TextChanged="OnTextChanged" Immediate="true" Clearable="true" Style="width:90%;" />
        <MudTreeView T="TreeViewItemViewModel" @ref="_treeView" FilterFunc="MatchesName" ServerData="@LoadServerData" Items="@Repositories">
            <ItemTemplate>

                <MudTreeViewItem Value="@context.Value"
                                 Text="@context.Value.Name"
                                 Items="@context.Children"
                                 OnClick="@(()=> HandleItemClick(@context.Value))"
                                 ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<TreeViewItemViewModel>>>(items => OnItemsLoaded(context, items)))"
                                 @bind-Expanded="@context.Expanded"
                                 CanExpand="@context.Expandable"
                                 Icon="@context.Icon"
                                 Visible="@context.Visible"
                                 LoadingIconColor="Color.Info"
                                 IconColor="Color.Info" />
            </ItemTemplate>
        </MudTreeView>
    }
</ShimmerLoad>